left_join(., occ_per_spp_ml, by = c('Species' = 'binomial'))
rm(times_ml_model, times_lm_model, occ_per_sp_lm, occ_per_spp_ml,
lm_model_runs, ml_model_runs)
lm_time_trials %>%
distinct(fname, .keep_all = T) %>%
summarize(Hours = sum(seconds)/3600)
m_interactive <- glm(seconds ~ Converged_Models * no_record, family = poisson, data = lm_time_trials)
m_additive <- glm(seconds ~ Converged_Models + no_record, family = poisson, data = lm_time_trials)
m_converge <- glm(seconds ~ Converged_Models, family = poisson, data = lm_time_trials)
#p1 <-
ggplot(lm_time_trials, aes(y = seconds/60, x = Converged_Models)) +
geom_jitter(shape=21, alpha = 0.6, aes(size = no_record, fill = no_record),
width = 0.4, height = 0.1) +
scale_size_area(name = 'Number of Occurrence Records:', max_size = 6, breaks = c(300, 600, 900)) +
scale_fill_gradient(name = 'Number of Occurrence Records:',  high = "#b5179e", low = "#3f37c9",
breaks = c(300, 600, 900)) +
labs(title = 'Linear Models',
y = 'Minutes',
x = 'Number of Converged Models') +
guides(fill=guide_legend(), size = guide_legend()) +
scale_y_continuous(breaks = c(30,60,90), limits = c(10,100)) +
scale_x_continuous(limits = c(2,6)) +
theme_bw() +
theme(legend.position="bottom", legend.box = 'vertical',
plot.title = element_text(hjust = 0.5))
#p1 <-
ggplot(lm_time_trials, aes(y = seconds/60, x = Converged_Models)) +
geom_jitter(shape=21, alpha = 0.6, aes(size = no_record, fill = no_record),
width = 0.4, height = 0.1) +
scale_size_area(name = 'Number of Occurrences:', max_size = 6, breaks = c(300, 600, 900)) +
scale_fill_gradient(name = 'Number of Occurrence Records:',  high = "#b5179e", low = "#3f37c9",
breaks = c(300, 600, 900)) +
labs(title = 'Linear Models',
y = 'Minutes',
x = 'Number of Converged Models') +
guides(fill=guide_legend(), size = guide_legend()) +
scale_y_continuous(breaks = c(30,60,90), limits = c(10,100)) +
scale_x_continuous(limits = c(2,6)) +
theme_bw() +
theme(legend.position="bottom", legend.box = 'vertical',
plot.title = element_text(hjust = 0.5))
p1 <- ggplot(lm_time_trials, aes(y = seconds/60, x = Converged_Models)) +
geom_jitter(shape=21, alpha = 0.6, aes(size = no_record, fill = no_record),
width = 0.4, height = 0.1) +
scale_size_area(name = 'No. of Occurrences:', max_size = 6, breaks = c(300, 600, 900)) +
scale_fill_gradient(name = 'No. of Occurrences:',  high = "#b5179e", low = "#3f37c9",
breaks = c(300, 600, 900)) +
labs(title = 'Linear Models',
y = 'Minutes',
x = 'Number of Converged Models') +
guides(fill=guide_legend(), size = guide_legend()) +
scale_y_continuous(breaks = c(30,60,90), limits = c(10,100)) +
scale_x_continuous(limits = c(2,6)) +
theme_bw() +
theme(legend.position="bottom", legend.box = 'vertical',
plot.title = element_text(hjust = 0.5))
p1
p1 <- ggplot(lm_time_trials, aes(y = seconds/60, x = Converged_Models)) +
geom_jitter(shape=21, alpha = 0.6, aes(size = no_record, fill = no_record),
width = 0.4, height = 0.1) +
scale_size_area(name = 'No. of Occurrences:', max_size = 6, breaks = c(300, 600, 900)) +
scale_fill_gradient(name = 'No. of Occurrences:',  high = "#b5179e", low = "#3f37c9",
breaks = c(300, 600, 900)) +
labs(title = 'Linear Models',
y = 'Minutes',
x = 'Number of Converged Models') +
guides(fill=guide_legend(), size = guide_legend()) +
scale_y_continuous(breaks = c(30,60,90), limits = c(10,100)) +
scale_x_continuous(limits = c(2,6)) +
theme_bw() +
theme(legend.position="bottom", legend.box = 'vertical',
legend.title = element_text(size=9),
plot.title = element_text(hjust = 0.5))
p1 <- ggplot(lm_time_trials, aes(y = seconds/60, x = Converged_Models)) +
geom_jitter(shape=21, alpha = 0.6, aes(size = no_record, fill = no_record),
width = 0.4, height = 0.1) +
scale_size_area(name = 'No. Occurrences:', max_size = 5, breaks = c(300, 600, 900)) +
scale_fill_gradient(name = 'No. Occurrences:',  high = "#b5179e", low = "#3f37c9",
breaks = c(300, 600, 900)) +
labs(title = 'Linear Models',
y = 'Minutes',
x = 'Number of Converged Models') +
guides(fill=guide_legend(), size = guide_legend()) +
scale_y_continuous(breaks = c(30,60,90), limits = c(10,100)) +
scale_x_continuous(limits = c(2,6)) +
theme_bw() +
theme(legend.position="bottom", legend.box = 'vertical',
legend.title = element_text(size=9),
legend.text = element_text(size=8),
plot.title = element_text(hjust = 0.5, size = 12))
?plot_annotation
??plot_annotation
scatterplot3d::scatterplot3d(initial_scores_lm[,c('AUC', 'Kappa', 'TSS')],
cex.axis = 0.6,  ylab = "",
main = '        Linear Models', color = alpha('#b5179e', 0.2)
xlim = c(0.6,1), ylim = c(0.2,1), zlim = c(0.2,1))
knitr::opts_chunk$set(echo = F)
knitr::opts_chunk$set(dpi = 300)
knitr::opts_chunk$set(message = F)
knitr::opts_chunk$set(warning = F)
library(tidyverse)
library(AICcmodavg)
files <- data.frame(fname = list.files('../results/stats'))
times <- files %>%
mutate(Species = str_extract(fname, '[^_]*_[^_]*'),
Model = str_remove(str_extract(fname, "_ml|glm_"), '_'),
Date = str_remove(str_extract(fname, '2022.*$'), '[.]csv'),
Date = as.POSIXct(Date, format = "%Y-%m-%d_%H:%M:%OS"),
Cols = if_else(Model == 'ml', 'aquamarine3', 'hotpink3'))
# plot(times$Date, times$Date , cex = 0.9 ,xaxt = "n", col = times$Cols )
times_ml <- filter(times, Model == 'ml')
times_ml <- times_ml[order(times_ml$Date, decreasing = F),]
times_ml$seconds <- c(NA, difftime(times_ml$Date[-1],
times_ml$Date[-nrow(times_ml)],
units="secs"))
times_ml <- times_ml[times_ml$seconds <= 7200,]
times_ml <- times_ml[complete.cases(times_ml),]
times_lm <- filter(times, Model == 'glm')
times_lm <- times_lm[order(times_lm$Date, decreasing = F),]
times_lm$seconds <- c(NA, difftime(times_lm$Date[-1],
times_lm$Date[-nrow(times_lm)],
units="secs"))
times_lm <- times_lm[times_lm$seconds <= 7200,]
times_lm <- times_lm[complete.cases(times_lm),]
rm(files, times)
lm_models <- lapply(paste0('../results/stats/', times_lm$fname), read.csv)
n <- times_lm$fname
names(lm_models) <- n
lm_models <- data.table::rbindlist(lm_models, idcol = 'fname') %>%
select(-X) %>%
mutate(Model = if_else(modelID <= 3, 'GLM','GAM')) %>%
group_by(fname) %>%
add_count(name = 'Converged_Models')%>%
group_by(fname, Model) %>%
add_count(name = 'Run')
ml_models <- lapply(paste0('../results/stats/', times_ml$fname), read.csv)
n <- times_ml$fname
names(ml_models) <- n
ml_models <- data.table::rbindlist(ml_models, idcol = 'fname') %>%
select(-X) %>%
mutate(Model = if_else(modelID <= 3, 'RF', 'BRT')) %>%
group_by(fname) %>%
add_count(name = 'Converged_Models') %>%
group_by(fname, Model) %>%
add_count(name = 'Run')
rm(n)
occ_per_sp_lm <- sf::st_read('../data/processed/spp_occurences_regression.shp', quiet = T) %>%
sf::st_drop_geometry() %>%
select(binomial, no_record) %>%
distinct()
occ_per_spp_ml <- sf::st_read('../data/processed/spp_occurences_no_duplicates.shp', quiet = T) %>%
sf::st_drop_geometry() %>%
select(binomial, no_record) %>%
distinct()
lm_model_runs <- lm_models %>%
distinct(fname, .keep_all = T) %>%
select(fname, Converged_Models, Model, Run)
times_lm_model <- times_lm %>%
select(fname, seconds, Species)
lm_time_trials <- left_join(times_lm_model, lm_model_runs, by = 'fname') %>%
left_join(., occ_per_sp_lm, by = c('Species' = 'binomial'))
ml_model_runs <- ml_models %>%
distinct(fname, .keep_all = T) %>%
select(fname, Converged_Models, Model, Run)
times_ml_model <- times_ml %>%
select(fname, seconds, Species)
ml_time_trials <- left_join(times_ml_model, ml_model_runs, by = 'fname') %>%
left_join(., occ_per_spp_ml, by = c('Species' = 'binomial'))
rm(times_ml_model, times_lm_model, occ_per_sp_lm, occ_per_spp_ml,
lm_model_runs, ml_model_runs)
lm_time_trials %>%
distinct(fname, .keep_all = T) %>%
summarize(Hours = sum(seconds)/3600)
m_interactive <- glm(seconds ~ Converged_Models * no_record, family = poisson, data = lm_time_trials)
m_additive <- glm(seconds ~ Converged_Models + no_record, family = poisson, data = lm_time_trials)
m_converge <- glm(seconds ~ Converged_Models, family = poisson, data = lm_time_trials)
#aictab(cand.set = list(m_interactive, m_additive, m_converge),
#       modnames = c('interactive', 'additive', 'converge'))
p1 <- ggplot(lm_time_trials, aes(y = seconds/60, x = Converged_Models)) +
geom_jitter(shape=21, alpha = 0.6, aes(size = no_record, fill = no_record),
width = 0.4, height = 0.1) +
scale_size_area(name = 'No. Occurrences:', max_size = 5, breaks = c(300, 600, 900)) +
scale_fill_gradient(name = 'No. Occurrences:',  high = "#b5179e", low = "#3f37c9",
breaks = c(300, 600, 900)) +
labs(title = 'Linear Models',
y = 'Minutes',
x = 'Number of Converged Models') +
guides(fill=guide_legend(), size = guide_legend()) +
scale_y_continuous(breaks = c(30,60,90), limits = c(10,100)) +
scale_x_continuous(limits = c(2,6)) +
theme_bw() +
theme(legend.position="bottom", legend.box = 'vertical',
axis.text = element_text(size = 10),
legend.title = element_text(size=9),
legend.text = element_text(size=8),
plot.title = element_text(hjust = 0.5, size = 12))
rm(m_interactive, m_additive, m_converge)
#hist(ml_time_trials$seconds)
ml_time_trials %>%
distinct(fname, .keep_all = T) %>%
summarize(Hours = sum(seconds)/3600)
m_interactive <- glm(seconds ~ Converged_Models * no_record, family = poisson, data = ml_time_trials)
m_additive <- glm(seconds ~ Converged_Models + no_record, family = poisson, data = ml_time_trials)
m_converge <- glm(seconds ~ Converged_Models, family = poisson, data = ml_time_trials)
#aictab(cand.set = list(m_interactive, m_additive, m_converge),
#       modnames = c('interactive', 'additive', 'converge'))
p2 <- ggplot(ml_time_trials, aes(y = seconds/60, x = Converged_Models)) +
geom_jitter(shape=21, alpha = 0.6, aes(size = no_record, fill = no_record),
width = 0.4, height = 0.1) +
scale_size_area(name = 'No. Occurrences:', max_size = 5, breaks = c(300, 600, 900)) +
scale_fill_gradient(name = 'No. Occurrences:',  low = "#52b788", high = "#1b4332",
breaks = c(300, 600, 900)) +
labs(title = 'Machine Learning',
y = 'Minutes', x = 'Number of Converged Models') +
guides(fill=guide_legend(), size = guide_legend()) +
scale_x_continuous(limits = c(2,6)) +
scale_y_continuous(breaks = c(30,60,90), limits = c(10,100),
position = "right") +
theme_bw() +
theme(legend.position="bottom",
axis.text = element_text(size = 10),
legend.title = element_text(size=9),
legend.text = element_text(size=8),
plot.title = element_text(hjust = 0.5, size = 12))
rm(m_interactive, m_additive, m_converge)
library(patchwork)
p1 + p2 +
plot_annotation(title = 'Time Spent Fitting and Projecting Models onto Gridded Surfaces')
??plot_annotation
initial_scores_lm <- left_join(lm_models,
select(lm_time_trials, fname, no_record),
by = "fname")
initial_scores_ml <- left_join(ml_models,
select(ml_time_trials, fname, no_record),
by = "fname")
par(mfrow = c(1,2))
scatterplot3d::scatterplot3d(initial_scores_lm[,c('AUC', 'Kappa', 'TSS')],
cex.axis = 0.6,  ylab = "",
main = '        Linear Models', color = alpha('#b5179e', 0.2),
xlim = c(0.6,1), ylim = c(0.2,1), zlim = c(0.2,1))
scatterplot3d::scatterplot3d(initial_scores_lm[,c('AUC', 'Kappa', 'TSS')],
cex.axis = 0.6,  ylab = "",
main = '        Linear Models', color = alpha('#b5179e', 0.5),
xlim = c(0.6,1), ylim = c(0.2,1), zlim = c(0.2,1))
library(data.table)
setDTthreads(threads = parallel::detectCores())
library(tidyverse)
path_blast <- '/home/reed/sequenceData/trimmed_metagenomic/informative_seqs/blast_results/tables'
files_blast <- list.files(path_blast)
files_path_blast <- paste0(path_blast, '/', files_blast)
# pull in the sequences which we feed into BLAST for classification.
path_informative_seqs <- '/home/reed/sequenceData/trimmed_metagenomic/informative_seqs'
files_informative_seqs <- list.files(path_informative_seqs)
fs <- inner_join(data.frame('files' = sub('\\.fasta', '', files_informative_seqs)),
data.frame('files' = sub('\\-cleaned.txt', '', files_blast)),
by = 'files') %>%
mutate(blast_path = paste0(path_blast, '/', files, '-cleaned.txt'),
seqs_path = paste0(path_informative_seqs, '/', files, '.fasta'))
rm(path_blast, files_blast, files_path_blast)
head(blast_results)
top1loci <- dat[, .SD[1], by=.(Sample, ID)]
top1loci <- top1loci %>%
count(Sample, loci) %>%
ungroup() %>%
group_by(Sample) %>%
mutate(Prcnt_loci = (n/sum(n)) * 100) %>%
dplyr::select(-n)
library(data.table)
setDTthreads(threads = parallel::detectCores())
library(tidyverse)
path_blast <- '/home/reed/sequenceData/trimmed_metagenomic/informative_seqs/blast_results/tables'
files_blast <- list.files(path_blast)
files_path_blast <- paste0(path_blast, '/', files_blast)
# pull in the sequences which we feed into BLAST for classification.
path_informative_seqs <- '/home/reed/sequenceData/trimmed_metagenomic/informative_seqs'
files_informative_seqs <- list.files(path_informative_seqs)
fs <- inner_join(data.frame('files' = sub('\\.fasta', '', files_informative_seqs)),
data.frame('files' = sub('\\-cleaned.txt', '', files_blast)),
by = 'files') %>%
mutate(blast_path = paste0(path_blast, '/', files, '-cleaned.txt'),
seqs_path = paste0(path_informative_seqs, '/', files, '.fasta'))
rm(path_blast, files_blast, files_path_blast)
head(blast_results)
top1loci <- dat[, .SD[1], by=.(Sample, ID)]
top1loci <- top1loci %>%
count(Sample, loci) %>%
ungroup() %>%
group_by(Sample) %>%
mutate(Prcnt_loci = (n/sum(n)) * 100) %>%
dplyr::select(-n)
library(data.table)
setDTthreads(threads = parallel::detectCores())
library(tidyverse)
path_blast <- '/home/reed/sequenceData/trimmed_metagenomic/informative_seqs/blast_results/tables'
files_blast <- list.files(path_blast)
files_path_blast <- paste0(path_blast, '/', files_blast)
# pull in the sequences which we feed into BLAST for classification.
path_informative_seqs <- '/home/reed/sequenceData/trimmed_metagenomic/informative_seqs'
files_informative_seqs <- list.files(path_informative_seqs)
fs <- inner_join(data.frame('files' = sub('\\.fasta', '', files_informative_seqs)),
data.frame('files' = sub('\\-cleaned.txt', '', files_blast)),
by = 'files') %>%
mutate(blast_path = paste0(path_blast, '/', files, '-cleaned.txt'),
seqs_path = paste0(path_informative_seqs, '/', files, '.fasta'))
rm(path_blast, files_blast, files_path_blast)
dat <- fread('/hdd/classify_kraken_results/data/processed/blasted_seqsV1.csv')
dat <- dat[!grepl("Length", Alignment)][!`Alignment` %like% 'no_results'][E.Value < 0.01]
setnames(dat, "SampleID", "Sample")
dat[,taxid := str_remove(str_extract(Alignment, '-[0-9]{1,}$'), '-')
][,Sample := str_remove(Sample, '_.*$')
]
dat[,loci := str_remove_all(str_extract(Alignment, '-[0-9]{4}-'), '-')
][, Alignment := str_remove(Alignment, '-.*$')
]
dat[, matches_per_seq := .N, by=.(Sample, ID)
][, matches_per_loci := .N, by =.(Sample, ID, loci)
][, prop_loci := matches_per_loci/matches_per_seq
]
top1loci <- dat[, .SD[1], by=.(Sample, ID)]
blat_matches <- top1loci %>%
group_by(Sample) %>%
count(taxid, name = 'Seqs_pr_taxon')  %>%
dplyr::select(Sample, taxid, Seqs_pr_taxon)  %>%
mutate(Total_seqs = sum(Seqs_pr_taxon),
Prcnt_seqs = (Seqs_pr_taxon/Total_seqs) * 100) %>%
arrange(Sample, -Prcnt_seqs) %>%
slice_head(n = 10) %>%
print()
# filter(blat_matches, taxid == 77623)
taxids <- blat_matches$taxid %>% replace_na('77623')
names <- taxizedb::taxid2name(taxids)
blat_matches$taxid <- names
blat_matches <- blat_matches %>% mutate(taxid = na_if(taxid, 'Linnaea borealis'))
write.csv(blat_matches, '/hdd/yun master/RMBL/corbicula loads/tally_blast_classifications.csv')
rm(blat_matches, taxids, names)
top1loci <- dat[, .SD[1], by=.(Sample, ID)]
top1loci <- dat[, .SD[1], by=.(Sample, ID)]
top1loci <- top1loci %>%
count(Sample, loci) %>%
ungroup() %>%
group_by(Sample) %>%
mutate(Prcnt_loci = (n/sum(n)) * 100) %>%
dplyr::select(-n)
top1loci <- top1loci %>%
arrange(Sample, loci) %>%
pivot_wider(names_from = loci, values_from = Prcnt_loci, values_fill = 0)
top1loci <- top1loci %>%
arrange(Sample, loci) %>%
pivot_wider(names_from = loci, values_from = Prcnt_loci, values_fill = 0)
top1loci <- as.data.frame(top1loci)
rownames(top1loci) <- top1loci$Sample
top1loci <- dplyr::select(top1loci, sort(colnames(top1loci)), -Sample)
top1loci <- as.matrix(top1loci)
heatmap(scale(top1loci, center = F), scale="column", Colv = NA, Rowv = NA,
main = 'Percent matched reads per locus by sample', xlab = 'Locus', ylab = 'Sample',
col= grDevices::colorRampPalette(RColorBrewer::brewer.pal(8, "Blues"))(25))
View(top1loci)
top1loci <- dat[, .SD[1], by=.(Sample, ID)]
top1loci <- dat[, .SD[1], by=.(Sample, ID)]
top1loci <- top1loci %>%
count(Sample, loci) %>%
ungroup() %>%
group_by(Sample) %>%
mutate(Prcnt_loci = (n/sum(n)) * 100) %>%
dplyr::select(-n)
top1loci <- top1loci %>%
count(Sample, loci) %>%
ungroup() %>%
group_by(Sample) %>%
mutate(Prcnt_loci = (n/sum(n)) * 100) %>%
dplyr::select(-n)
top1loci <- top1loci %>%
arrange(Sample, loci) %>%
pivot_wider(names_from = loci, values_from = Prcnt_loci, values_fill = 0)
top1loci <- as.data.frame(top1loci)
View(top1loci)
mutate(top1loci, Sample = as.numeric(Sample))
mutate(top1loci, Sample = as.numeric(Sample)) %>% arrange(Sample)
top1loci <- mutate(top1loci, Sample = as.numeric(Sample)) %>% arrange(Sample)
rownames(top1loci) <- top1loci$Sample
top1loci <- dplyr::select(top1loci, sort(colnames(top1loci)), -Sample)
top1loci <- as.matrix(top1loci)
png('/hdd/yun master/MEE_manuscript/graphics/graphs/Percent_loci_matched_by_sample.png',
width = 720, height = 720, units = "px", bg = 'transparent')
par(mar = c(5, 5, 4, 6))
heatmap(scale(top1loci, center = F), scale="column", Colv = NA, Rowv = NA,
main = 'Percent matched reads per locus by sample', xlab = 'Locus', ylab = 'Sample',
col= grDevices::colorRampPalette(RColorBrewer::brewer.pal(8, "Blues"))(25))
png('/hdd/yun master/MEE_manuscript/graphics/graphs/Percent_loci_matched_by_sample.png',
width = 720, height = 720, units = "px", bg = 'transparent')
par(mar = c(5, 5, 4, 6))
heatmap(scale(top1loci, center = F), scale="column", Colv = NA, Rowv = NA,
main = 'Percent matched reads per locus by sample', xlab = 'Locus', ylab = 'Sample',
col= grDevices::colorRampPalette(RColorBrewer::brewer.pal(8, "Blues"))(25))
heatmap(scale(top1loci, center = F), scale="column", Colv = NA, Rowv = NA,
main = 'Percent matched reads per locus by sample', xlab = 'Locus', ylab = 'Sample',
col= grDevices::colorRampPalette(RColorBrewer::brewer.pal(8, "Blues"))(25))
top1loci <- mutate(top1loci, Sample = as.numeric(Sample)) %>% arrange(-Sample)
top1loci <- dat[, .SD[1], by=.(Sample, ID)]
# loci <- top1loci %>% group_by(Sample, loci) %>% count() %>%
# write.csv(., '/hdd/yun master/MEE_manuscript/data/reads_per_loci.csv')
top1loci <- top1loci %>%
count(Sample, loci) %>%
ungroup() %>%
group_by(Sample) %>%
mutate(Prcnt_loci = (n/sum(n)) * 100) %>%
dplyr::select(-n)
top1loci <- top1loci %>%
arrange(Sample, loci) %>%
pivot_wider(names_from = loci, values_from = Prcnt_loci, values_fill = 0)
top1loci <- as.data.frame(top1loci)
top1loci <- mutate(top1loci, Sample = as.numeric(Sample)) %>% arrange(-Sample)
rownames(top1loci) <- top1loci$Sample
top1loci <- dplyr::select(top1loci, sort(colnames(top1loci)), -Sample)
top1loci <- as.matrix(top1loci)
heatmap(scale(top1loci, center = F), scale="column", Colv = NA, Rowv = NA,
main = 'Percent matched reads per locus by sample', xlab = 'Locus', ylab = 'Sample',
col= grDevices::colorRampPalette(RColorBrewer::brewer.pal(8, "Blues"))(25))
heatmap(scale(top1loci, center = F), scale="column", Colv = NA, Rowv = NA,
main = 'Percent matched reads per locus by sample', xlab = 'Locus', ylab = 'Sample',
col= grDevices::colorRampPalette(RColorBrewer::brewer.pal(8, "Blues"))(25))
png('/hdd/yun master/MEE_manuscript/graphics/plots/Percent_loci_matched_by_sample.png',
width = 720, height = 720, units = "px", bg = 'transparent')
par(mar = c(5, 5, 4, 6))
heatmap(scale(top1loci, center = F), scale="column", Colv = NA, Rowv = NA,
main = 'Percent matched reads per locus by sample', xlab = 'Locus', ylab = 'Sample',
col= grDevices::colorRampPalette(RColorBrewer::brewer.pal(8, "Blues"))(25))
legend(x="bottomright", inset = c(-0.001, -0.30),
legend=c(paste0("Max: ", round(max(top1loci), 1), '%'),
paste0("Mean: ", round(mean(top1loci), 1), '%'),
paste0("Min: ", round(min(top1loci), 1), '%')
),
fill = c(grDevices::colorRampPalette(RColorBrewer::brewer.pal(8, "Blues"))(25)[25],
grDevices::colorRampPalette(RColorBrewer::brewer.pal(8, "Blues"))(25)[12],
grDevices::colorRampPalette(RColorBrewer::brewer.pal(8, "Blues"))(25)[1]
),
bty = "n", cex = 0.6, xpd = T
)
on.exit(par(opar))
dev.off()
png('/hdd/yun master/MEE_manuscript/graphics/plots/Percent_loci_matched_by_sample.png',
width = 720, height = 720, units = "px", bg = 'transparent')
par(mar = c(5, 5, 4, 6))
heatmap(scale(top1loci, center = F), scale="column", Colv = NA, Rowv = NA,
main = 'Percent matched reads', xlab = 'Locus', ylab = 'Sample',
col= grDevices::colorRampPalette(RColorBrewer::brewer.pal(8, "Blues"))(25))
legend(x="bottomright", inset = c(-0.001, -0.30),
legend=c(paste0("Max: ", round(max(top1loci), 1), '%'),
paste0("Mean: ", round(mean(top1loci), 1), '%'),
paste0("Min: ", round(min(top1loci), 1), '%')
),
fill = c(grDevices::colorRampPalette(RColorBrewer::brewer.pal(8, "Blues"))(25)[25],
grDevices::colorRampPalette(RColorBrewer::brewer.pal(8, "Blues"))(25)[12],
grDevices::colorRampPalette(RColorBrewer::brewer.pal(8, "Blues"))(25)[1]
),
bty = "n", cex = 0.6, xpd = T
)
on.exit(par(opar))
dev.off()
png('/hdd/yun master/MEE_manuscript/graphics/plots/Percent_loci_matched_by_sample.png',
width = 720, height = 720, units = "px", bg = 'transparent')
par(mar = c(5, 5, 4, 6))
heatmap(scale(top1loci, center = F), scale="column", Colv = NA, Rowv = NA,
main = 'Percent matched reads', xlab = 'Locus', ylab = 'Sample',
col= grDevices::colorRampPalette(RColorBrewer::brewer.pal(8, "Blues"))(25))
legend(x="bottomright", inset = c(-0.001, -0.30),
legend=c(paste0("Max: ", round(max(top1loci), 1), '%'),
paste0("Mean: ", round(mean(top1loci), 1), '%'),
paste0("Min: ", round(min(top1loci), 1), '%')
),
fill = c(grDevices::colorRampPalette(RColorBrewer::brewer.pal(8, "Blues"))(25)[25],
grDevices::colorRampPalette(RColorBrewer::brewer.pal(8, "Blues"))(25)[12],
grDevices::colorRampPalette(RColorBrewer::brewer.pal(8, "Blues"))(25)[1]
),
bty = "n", cex = 0.6, xpd = T
)
on.exit(par(opar))
dev.off()
gc()
ecoregions <- sf::read_sf("../data/us_eco_l4/us_eco_l4_no_st.shp") %>%
dplyr::select(NA_L3CODE, NA_L3NAME) %>%
filter(NA_L3NAME == 'Southern Rockies') %>%
st_union() %>%
st_transform(5070) %>%
st_as_sf()
library(sf)
library(tigris)
library(tidyverse)
library(ggmap)
setwd('/home/reed/Documents/Analytical_Toolkit_SDM/scripts')
source('functions.R')
co <- c(left = -111, bottom = 34, right = -102, top = 44)
co_map <- get_stamenmap(co, zoom = 8, maptype = "terrain-background")
co_map <- ggmap_bbox(co_map)
states <- tigris::states()
places <- tigris::places(state = c('CO', 'NM', 'WY')) %>%
filter(NAME %in% c('Denver', 'Albuquerque', 'Rawlins', 'Grand Junction',
'Durango', 'Laramie', 'Lander'))
ecoregions <- st_transform(ecoregions, 3857)
ecoregions <- sf::read_sf("../data/us_eco_l4/us_eco_l4_no_st.shp") %>%
dplyr::select(NA_L3CODE, NA_L3NAME) %>%
filter(NA_L3NAME == 'Southern Rockies') %>%
st_union() %>%
st_transform(5070) %>%
st_as_sf()
st_write(ecoregions, "../data/us_eco_l4/us_eco_l4_no_st.shp", quiet = T)
st_write(ecoregions, "../data/us_eco_l4/us_eco_l4_no_st.shp", append = F)
ecoregions <- sf::read_sf("../data/us_eco_l4/us_eco_l4_no_st.shp") %>%
st_write(ecoregions, "../data/us_eco_l4/us_eco_l4_no_st.shp", append = F)
ecoregions <- sf::read_sf("../data/us_eco_l4/us_eco_l4_no_st.shp")
ggplot(ecoregions) +
geom_sf()
